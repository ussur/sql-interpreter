
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'scriptleftORleftANDrightNOTleftEQNOTEQleftMORELESSMOREEQLESSEQLIKEBETWEENleftADDSUBleftASTERISKSLASHleftCONCATADD ALL AND ANY AS ASC ASTERISK BETWEEN BY COMMA CONCAT CROSS DESC DISTINCT DOT EQ ESCAPE EXISTS FLOAT FROM FULL GROUP HAVING IDENTIFIER IN INNER INT INTERSECT IS JOIN LEFT LESS LESSEQ LIKE LPAR MINUS MORE MOREEQ NATURAL NOT NOTEQ NULL ON OR ORDER OUTER RIGHT RPAR SELECT SEMICOLON SLASH SQUOTE STR SUB UNION WHEREscript : script select_statement SEMICOLON\n        script : select_statement SEMICOLON\n        select_statement : select_clause from_clause order_by_clause\n        select_clause : SELECT select_type columns\n        select_type : ALL\n                       | DISTINCT\n                       | empty\n        columns : columns COMMA column\n        columns : column\n        column : expr AS IDENTIFIER\n        column : expr IDENTIFIER\n        column : expr\n        expr : compound_expr\n                | simple_expr\n        simple_expr : IDENTIFIER DOT identifier\n                       | IDENTIFIER DOT asterisk\n        simple_expr : identifier\n                       | asterisk\n                       | string\n                       | number\n        identifier : IDENTIFIER\n        asterisk : ASTERISK\n        string : SQUOTE STR SQUOTE\n        number : FLOAT\n                  | INT\n        compound_expr : expr ADD expr\n                         | expr SUB expr\n                         | expr ASTERISK expr\n                         | expr SLASH expr\n                         | expr CONCAT expr\n        compound_expr : ADD expr\n                         | SUB expr\n        compound_expr : LPAR expr RPAR\n        from_clause : FROM tables\n        tables : tables COMMA table\n        tables : table\n        table : identifier\n        table : identifier IDENTIFIER\n        table : LPAR select_statement RPAR IDENTIFIER\n        order_by_clause : empty\n        order_by_clause : ORDER BY order_by_list\n        order_by_list : order_by_list COMMA order_by_item\n        order_by_list : order_by_item\n        order_by_item : IDENTIFIER asc_desc\n        asc_desc : empty\n        asc_desc : ASC\n                    | DESC\n        empty :'
    
_lr_action_items = {'SELECT':([0,1,6,13,21,],[4,4,-2,-1,4,]),'$end':([1,6,13,],[0,-2,-1,]),'SEMICOLON':([2,5,7,14,15,17,18,19,20,41,56,57,58,59,73,74,75,76,77,78,],[6,13,-48,-3,-40,-34,-36,-37,-21,-38,-41,-43,-48,-35,-44,-45,-46,-47,-39,-42,]),'FROM':([3,20,22,23,24,25,26,27,30,32,33,34,35,37,38,45,52,53,61,62,63,64,65,66,67,68,69,70,71,],[8,-21,-4,-9,-12,-21,-13,-14,-22,-17,-18,-19,-20,-24,-25,-11,-31,-32,-8,-10,-26,-27,-28,-29,-30,-15,-16,-33,-23,]),'ALL':([4,],[10,]),'DISTINCT':([4,],[11,]),'ADD':([4,9,10,11,12,20,24,25,26,27,28,29,30,31,32,33,34,35,37,38,43,46,47,48,49,50,52,53,54,63,64,65,66,67,68,69,70,71,],[-48,28,-5,-6,-7,-21,46,-21,-13,-14,28,28,-22,28,-17,-18,-19,-20,-24,-25,28,28,28,28,28,28,-31,-32,46,-26,-27,-28,-29,-30,-15,-16,-33,-23,]),'SUB':([4,9,10,11,12,20,24,25,26,27,28,29,30,31,32,33,34,35,37,38,43,46,47,48,49,50,52,53,54,63,64,65,66,67,68,69,70,71,],[-48,29,-5,-6,-7,-21,47,-21,-13,-14,29,29,-22,29,-17,-18,-19,-20,-24,-25,29,29,29,29,29,29,-31,-32,47,-26,-27,-28,-29,-30,-15,-16,-33,-23,]),'LPAR':([4,8,9,10,11,12,28,29,31,40,43,46,47,48,49,50,],[-48,21,31,-5,-6,-7,31,31,31,21,31,31,31,31,31,31,]),'IDENTIFIER':([4,8,9,10,11,12,19,20,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,43,44,46,47,48,49,50,51,52,53,60,63,64,65,66,67,68,69,70,71,72,],[-48,20,25,-5,-6,-7,41,-21,45,-21,-13,-14,25,25,-22,25,-17,-18,-19,-20,-24,-25,58,20,25,62,25,25,25,25,25,20,-31,-32,77,-26,-27,-28,-29,-30,-15,-16,-33,-23,58,]),'ASTERISK':([4,9,10,11,12,20,24,25,26,27,28,29,30,31,32,33,34,35,37,38,43,46,47,48,49,50,51,52,53,54,63,64,65,66,67,68,69,70,71,],[-48,30,-5,-6,-7,-21,48,-21,-13,-14,30,30,-22,30,-17,-18,-19,-20,-24,-25,30,30,30,30,30,30,30,48,48,48,48,48,-28,-29,-30,-15,-16,-33,-23,]),'SQUOTE':([4,9,10,11,12,28,29,31,43,46,47,48,49,50,55,],[-48,36,-5,-6,-7,36,36,36,36,36,36,36,36,36,71,]),'FLOAT':([4,9,10,11,12,28,29,31,43,46,47,48,49,50,],[-48,37,-5,-6,-7,37,37,37,37,37,37,37,37,37,]),'INT':([4,9,10,11,12,28,29,31,43,46,47,48,49,50,],[-48,38,-5,-6,-7,38,38,38,38,38,38,38,38,38,]),'ORDER':([7,17,18,19,20,41,59,77,],[16,-34,-36,-37,-21,-38,-35,-39,]),'RPAR':([7,14,15,17,18,19,20,25,26,27,30,32,33,34,35,37,38,41,42,52,53,54,56,57,58,59,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,],[-48,-3,-40,-34,-36,-37,-21,-21,-13,-14,-22,-17,-18,-19,-20,-24,-25,-38,60,-31,-32,70,-41,-43,-48,-35,-26,-27,-28,-29,-30,-15,-16,-33,-23,-44,-45,-46,-47,-39,-42,]),'BY':([16,],[39,]),'COMMA':([17,18,19,20,22,23,24,25,26,27,30,32,33,34,35,37,38,41,45,52,53,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,],[40,-36,-37,-21,43,-9,-12,-21,-13,-14,-22,-17,-18,-19,-20,-24,-25,-38,-11,-31,-32,72,-43,-48,-35,-8,-10,-26,-27,-28,-29,-30,-15,-16,-33,-23,-44,-45,-46,-47,-39,-42,]),'AS':([20,24,25,26,27,30,32,33,34,35,37,38,52,53,63,64,65,66,67,68,69,70,71,],[-21,44,-21,-13,-14,-22,-17,-18,-19,-20,-24,-25,-31,-32,-26,-27,-28,-29,-30,-15,-16,-33,-23,]),'SLASH':([20,24,25,26,27,30,32,33,34,35,37,38,52,53,54,63,64,65,66,67,68,69,70,71,],[-21,49,-21,-13,-14,-22,-17,-18,-19,-20,-24,-25,49,49,49,49,49,-28,-29,-30,-15,-16,-33,-23,]),'CONCAT':([20,24,25,26,27,30,32,33,34,35,37,38,52,53,54,63,64,65,66,67,68,69,70,71,],[-21,50,-21,-13,-14,-22,-17,-18,-19,-20,-24,-25,50,50,50,50,50,50,50,-30,-15,-16,-33,-23,]),'DOT':([25,],[51,]),'STR':([36,],[55,]),'ASC':([58,],[75,]),'DESC':([58,],[76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'script':([0,],[1,]),'select_statement':([0,1,21,],[2,5,42,]),'select_clause':([0,1,21,],[3,3,3,]),'from_clause':([3,],[7,]),'select_type':([4,],[9,]),'empty':([4,7,58,],[12,15,74,]),'order_by_clause':([7,],[14,]),'tables':([8,],[17,]),'table':([8,40,],[18,59,]),'identifier':([8,9,28,29,31,40,43,46,47,48,49,50,51,],[19,32,32,32,32,19,32,32,32,32,32,32,68,]),'columns':([9,],[22,]),'column':([9,43,],[23,61,]),'expr':([9,28,29,31,43,46,47,48,49,50,],[24,52,53,54,24,63,64,65,66,67,]),'compound_expr':([9,28,29,31,43,46,47,48,49,50,],[26,26,26,26,26,26,26,26,26,26,]),'simple_expr':([9,28,29,31,43,46,47,48,49,50,],[27,27,27,27,27,27,27,27,27,27,]),'asterisk':([9,28,29,31,43,46,47,48,49,50,51,],[33,33,33,33,33,33,33,33,33,33,69,]),'string':([9,28,29,31,43,46,47,48,49,50,],[34,34,34,34,34,34,34,34,34,34,]),'number':([9,28,29,31,43,46,47,48,49,50,],[35,35,35,35,35,35,35,35,35,35,]),'order_by_list':([39,],[56,]),'order_by_item':([39,72,],[57,78,]),'asc_desc':([58,],[73,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> script","S'",1,None,None,None),
  ('script -> script select_statement SEMICOLON','script',3,'p_script_1','parser.py',9),
  ('script -> select_statement SEMICOLON','script',2,'p_script_2','parser.py',15),
  ('select_statement -> select_clause from_clause order_by_clause','select_statement',3,'p_select_statement','parser.py',20),
  ('select_clause -> SELECT select_type columns','select_clause',3,'p_select_clause','parser.py',28),
  ('select_type -> ALL','select_type',1,'p_select_type','parser.py',33),
  ('select_type -> DISTINCT','select_type',1,'p_select_type','parser.py',34),
  ('select_type -> empty','select_type',1,'p_select_type','parser.py',35),
  ('columns -> columns COMMA column','columns',3,'p_columns_1','parser.py',43),
  ('columns -> column','columns',1,'p_columns_2','parser.py',49),
  ('column -> expr AS IDENTIFIER','column',3,'p_column_1','parser.py',54),
  ('column -> expr IDENTIFIER','column',2,'p_column_2','parser.py',59),
  ('column -> expr','column',1,'p_column_3','parser.py',64),
  ('expr -> compound_expr','expr',1,'p_expr','parser.py',69),
  ('expr -> simple_expr','expr',1,'p_expr','parser.py',70),
  ('simple_expr -> IDENTIFIER DOT identifier','simple_expr',3,'p_simple_expr_1','parser.py',75),
  ('simple_expr -> IDENTIFIER DOT asterisk','simple_expr',3,'p_simple_expr_1','parser.py',76),
  ('simple_expr -> identifier','simple_expr',1,'p_simple_expr_2','parser.py',82),
  ('simple_expr -> asterisk','simple_expr',1,'p_simple_expr_2','parser.py',83),
  ('simple_expr -> string','simple_expr',1,'p_simple_expr_2','parser.py',84),
  ('simple_expr -> number','simple_expr',1,'p_simple_expr_2','parser.py',85),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','parser.py',90),
  ('asterisk -> ASTERISK','asterisk',1,'p_asterisk','parser.py',95),
  ('string -> SQUOTE STR SQUOTE','string',3,'p_string','parser.py',100),
  ('number -> FLOAT','number',1,'p_number','parser.py',105),
  ('number -> INT','number',1,'p_number','parser.py',106),
  ('compound_expr -> expr ADD expr','compound_expr',3,'p_compound_expr_1','parser.py',111),
  ('compound_expr -> expr SUB expr','compound_expr',3,'p_compound_expr_1','parser.py',112),
  ('compound_expr -> expr ASTERISK expr','compound_expr',3,'p_compound_expr_1','parser.py',113),
  ('compound_expr -> expr SLASH expr','compound_expr',3,'p_compound_expr_1','parser.py',114),
  ('compound_expr -> expr CONCAT expr','compound_expr',3,'p_compound_expr_1','parser.py',115),
  ('compound_expr -> ADD expr','compound_expr',2,'p_compound_expr_2','parser.py',120),
  ('compound_expr -> SUB expr','compound_expr',2,'p_compound_expr_2','parser.py',121),
  ('compound_expr -> LPAR expr RPAR','compound_expr',3,'p_compound_expr_3','parser.py',126),
  ('from_clause -> FROM tables','from_clause',2,'p_from_clause_1','parser.py',131),
  ('tables -> tables COMMA table','tables',3,'p_tables_1','parser.py',136),
  ('tables -> table','tables',1,'p_tables_2','parser.py',142),
  ('table -> identifier','table',1,'p_table_1','parser.py',147),
  ('table -> identifier IDENTIFIER','table',2,'p_table_2','parser.py',152),
  ('table -> LPAR select_statement RPAR IDENTIFIER','table',4,'p_table_3','parser.py',157),
  ('order_by_clause -> empty','order_by_clause',1,'p_order_by_clause_1','parser.py',163),
  ('order_by_clause -> ORDER BY order_by_list','order_by_clause',3,'p_order_by_clause_2','parser.py',167),
  ('order_by_list -> order_by_list COMMA order_by_item','order_by_list',3,'p_order_by_list_1','parser.py',172),
  ('order_by_list -> order_by_item','order_by_list',1,'p_order_by_list_2','parser.py',178),
  ('order_by_item -> IDENTIFIER asc_desc','order_by_item',2,'p_order_by_item','parser.py',183),
  ('asc_desc -> empty','asc_desc',1,'p_asc_desc_1','parser.py',188),
  ('asc_desc -> ASC','asc_desc',1,'p_asc_desc_2','parser.py',193),
  ('asc_desc -> DESC','asc_desc',1,'p_asc_desc_2','parser.py',194),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',199),
]
